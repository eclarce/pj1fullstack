// const express = require('express');
// const authController = require('../controllers/authController');
// const router = express.Router();
// const crypto = require('node:crypto')

// const sessions = new Map()

// router.post('/users', authController.createUser);

// const authMiddleware =
//   async (req, res, next) => {
//     // Verificar nos headers Authorization: Bearer XXXXXX onde XXXX e seu UUID
//     // gerado no post /auth/login
//     const authHeader = req.headers['authorization']
//     // Nao tem nem o header setado, retornar 401
//     if (!authHeader) {
//       res.status(401).end()
//       return
//     }
//     // Separar a palavra "Bearer " do valor do token, dando split e pegando 
//     // a segunda parte depois do espaco (o valor do UUID em si)
//     const sessionId = authHeader.split(' ')[1]

//     const user = sessions.get(sessionId)

//     console.log('Verificando por user com session', sessionId)

//     if (!user) {
//       res.status(401).end()
//       return
//     }

//     console.log('Encontrada session para user', user)
//     next()
//     // if (req.query.bypass) {
//     //   req.session = { id: 1}
//     //   next();
//     //   return
//     // }
//     // res.status(401).end()
//   }

// // middleware so aqui
// router.get('/users', authMiddleware, authController.getUsers);

// router.put('/users', authController.updateUser);

// router.post('/login', (req, res) => {

//   // todo: verificar se a senha em branco depois de hasheada bate com o banco
//   // se ok, criar uma session. Por enquanto hardcoded.
//   if (req.body.name == 'vitor' && req.body.password == '123') {
//     // 1 dar select no banco pelo username

    
//     // 2 comparar a senha crypto do banco com a senha placa cripgrafada
//     // bcrypt.compareSync()
//     // 3 caso positivo salva a session no "sessions" (Map)

//     // Depois de verificada a senha pegar o usuario do banco e salvar na session com
//     // os dados necessarios, como id, nome, email.
//     const sessionId = crypto.randomUUID()
//     // Setar a sessao no mapa de sessions, lembrando que em algum momento deveria expirar
//     // esse "token" e no mundo real provavelmente seria um JWT.
//     sessions.set(sessionId, { username: 'vitor', id: 1 })
//     res.send(sessionId)
//     return
//   }
//   return res.status(400).send('Nome e senha est√£o incorretos!');
// });


// module.exports = router;